/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 804.0, "minX": 0.0, "maxY": 199676.0, "series": [{"data": [[0.0, 804.0], [0.1, 873.0], [0.2, 881.0], [0.3, 881.0], [0.4, 964.0], [0.5, 976.0], [0.6, 1098.0], [0.7, 1123.0], [0.8, 1157.0], [0.9, 1184.0], [1.0, 1206.0], [1.1, 1248.0], [1.2, 1258.0], [1.3, 1271.0], [1.4, 1271.0], [1.5, 1350.0], [1.6, 1370.0], [1.7, 1377.0], [1.8, 1414.0], [1.9, 1434.0], [2.0, 1453.0], [2.1, 1474.0], [2.2, 1523.0], [2.3, 1525.0], [2.4, 1530.0], [2.5, 1531.0], [2.6, 1537.0], [2.7, 1537.0], [2.8, 1540.0], [2.9, 1546.0], [3.0, 1554.0], [3.1, 1563.0], [3.2, 1571.0], [3.3, 1583.0], [3.4, 1600.0], [3.5, 1622.0], [3.6, 1637.0], [3.7, 1644.0], [3.8, 1645.0], [3.9, 1646.0], [4.0, 1649.0], [4.1, 1650.0], [4.2, 1669.0], [4.3, 1678.0], [4.4, 1686.0], [4.5, 1703.0], [4.6, 1716.0], [4.7, 1716.0], [4.8, 1741.0], [4.9, 1743.0], [5.0, 1743.0], [5.1, 1745.0], [5.2, 1748.0], [5.3, 1764.0], [5.4, 1767.0], [5.5, 1771.0], [5.6, 1780.0], [5.7, 1781.0], [5.8, 1786.0], [5.9, 1792.0], [6.0, 1797.0], [6.1, 1797.0], [6.2, 1812.0], [6.3, 1815.0], [6.4, 1841.0], [6.5, 1845.0], [6.6, 1858.0], [6.7, 1873.0], [6.8, 1885.0], [6.9, 1885.0], [7.0, 1895.0], [7.1, 1901.0], [7.2, 1902.0], [7.3, 1902.0], [7.4, 1915.0], [7.5, 1926.0], [7.6, 1931.0], [7.7, 1950.0], [7.8, 1954.0], [7.9, 1957.0], [8.0, 1977.0], [8.1, 2004.0], [8.2, 2023.0], [8.3, 2030.0], [8.4, 2033.0], [8.5, 2036.0], [8.6, 2059.0], [8.7, 2061.0], [8.8, 2068.0], [8.9, 2071.0], [9.0, 2072.0], [9.1, 2084.0], [9.2, 2084.0], [9.3, 2090.0], [9.4, 2092.0], [9.5, 2097.0], [9.6, 2101.0], [9.7, 2114.0], [9.8, 2114.0], [9.9, 2124.0], [10.0, 2126.0], [10.1, 2130.0], [10.2, 2136.0], [10.3, 2137.0], [10.4, 2147.0], [10.5, 2152.0], [10.6, 2163.0], [10.7, 2171.0], [10.8, 2189.0], [10.9, 2190.0], [11.0, 2195.0], [11.1, 2196.0], [11.2, 2202.0], [11.3, 2204.0], [11.4, 2204.0], [11.5, 2207.0], [11.6, 2209.0], [11.7, 2210.0], [11.8, 2220.0], [11.9, 2223.0], [12.0, 2229.0], [12.1, 2230.0], [12.2, 2238.0], [12.3, 2239.0], [12.4, 2240.0], [12.5, 2253.0], [12.6, 2257.0], [12.7, 2257.0], [12.8, 2263.0], [12.9, 2267.0], [13.0, 2271.0], [13.1, 2278.0], [13.2, 2284.0], [13.3, 2290.0], [13.4, 2291.0], [13.5, 2293.0], [13.6, 2300.0], [13.7, 2306.0], [13.8, 2315.0], [13.9, 2320.0], [14.0, 2322.0], [14.1, 2334.0], [14.2, 2334.0], [14.3, 2340.0], [14.4, 2348.0], [14.5, 2351.0], [14.6, 2362.0], [14.7, 2366.0], [14.8, 2368.0], [14.9, 2369.0], [15.0, 2375.0], [15.1, 2382.0], [15.2, 2384.0], [15.3, 2391.0], [15.4, 2393.0], [15.5, 2418.0], [15.6, 2418.0], [15.7, 2422.0], [15.8, 2423.0], [15.9, 2424.0], [16.0, 2427.0], [16.1, 2429.0], [16.2, 2431.0], [16.3, 2434.0], [16.4, 2440.0], [16.5, 2456.0], [16.6, 2458.0], [16.7, 2467.0], [16.8, 2471.0], [16.9, 2474.0], [17.0, 2476.0], [17.1, 2491.0], [17.2, 2494.0], [17.3, 2501.0], [17.4, 2503.0], [17.5, 2507.0], [17.6, 2511.0], [17.7, 2512.0], [17.8, 2518.0], [17.9, 2536.0], [18.0, 2539.0], [18.1, 2539.0], [18.2, 2552.0], [18.3, 2553.0], [18.4, 2555.0], [18.5, 2567.0], [18.6, 2567.0], [18.7, 2569.0], [18.8, 2572.0], [18.9, 2574.0], [19.0, 2577.0], [19.1, 2579.0], [19.2, 2579.0], [19.3, 2580.0], [19.4, 2587.0], [19.5, 2593.0], [19.6, 2599.0], [19.7, 2601.0], [19.8, 2604.0], [19.9, 2606.0], [20.0, 2609.0], [20.1, 2613.0], [20.2, 2615.0], [20.3, 2618.0], [20.4, 2629.0], [20.5, 2631.0], [20.6, 2638.0], [20.7, 2645.0], [20.8, 2650.0], [20.9, 2652.0], [21.0, 2655.0], [21.1, 2658.0], [21.2, 2667.0], [21.3, 2668.0], [21.4, 2681.0], [21.5, 2683.0], [21.6, 2693.0], [21.7, 2700.0], [21.8, 2701.0], [21.9, 2709.0], [22.0, 2717.0], [22.1, 2730.0], [22.2, 2735.0], [22.3, 2737.0], [22.4, 2765.0], [22.5, 2768.0], [22.6, 2769.0], [22.7, 2774.0], [22.8, 2785.0], [22.9, 2787.0], [23.0, 2791.0], [23.1, 2794.0], [23.2, 2796.0], [23.3, 2798.0], [23.4, 2799.0], [23.5, 2809.0], [23.6, 2810.0], [23.7, 2814.0], [23.8, 2823.0], [23.9, 2824.0], [24.0, 2827.0], [24.1, 2835.0], [24.2, 2844.0], [24.3, 2852.0], [24.4, 2858.0], [24.5, 2863.0], [24.6, 2866.0], [24.7, 2883.0], [24.8, 2889.0], [24.9, 2889.0], [25.0, 2893.0], [25.1, 2898.0], [25.2, 2907.0], [25.3, 2910.0], [25.4, 2913.0], [25.5, 2920.0], [25.6, 2923.0], [25.7, 2923.0], [25.8, 2929.0], [25.9, 2932.0], [26.0, 2933.0], [26.1, 2938.0], [26.2, 2941.0], [26.3, 2942.0], [26.4, 2948.0], [26.5, 2951.0], [26.6, 2953.0], [26.7, 2959.0], [26.8, 2966.0], [26.9, 2967.0], [27.0, 2977.0], [27.1, 2986.0], [27.2, 2999.0], [27.3, 3003.0], [27.4, 3009.0], [27.5, 3009.0], [27.6, 3012.0], [27.7, 3016.0], [27.8, 3022.0], [27.9, 3027.0], [28.0, 3032.0], [28.1, 3035.0], [28.2, 3035.0], [28.3, 3042.0], [28.4, 3046.0], [28.5, 3046.0], [28.6, 3064.0], [28.7, 3068.0], [28.8, 3068.0], [28.9, 3082.0], [29.0, 3082.0], [29.1, 3083.0], [29.2, 3087.0], [29.3, 3088.0], [29.4, 3092.0], [29.5, 3097.0], [29.6, 3100.0], [29.7, 3102.0], [29.8, 3108.0], [29.9, 3123.0], [30.0, 3133.0], [30.1, 3133.0], [30.2, 3138.0], [30.3, 3145.0], [30.4, 3149.0], [30.5, 3150.0], [30.6, 3182.0], [30.7, 3196.0], [30.8, 3201.0], [30.9, 3213.0], [31.0, 3219.0], [31.1, 3219.0], [31.2, 3221.0], [31.3, 3223.0], [31.4, 3226.0], [31.5, 3230.0], [31.6, 3244.0], [31.7, 3252.0], [31.8, 3290.0], [31.9, 3291.0], [32.0, 3294.0], [32.1, 3304.0], [32.2, 3309.0], [32.3, 3312.0], [32.4, 3319.0], [32.5, 3321.0], [32.6, 3345.0], [32.7, 3346.0], [32.8, 3364.0], [32.9, 3364.0], [33.0, 3365.0], [33.1, 3371.0], [33.2, 3374.0], [33.3, 3382.0], [33.4, 3388.0], [33.5, 3389.0], [33.6, 3392.0], [33.7, 3397.0], [33.8, 3398.0], [33.9, 3401.0], [34.0, 3414.0], [34.1, 3417.0], [34.2, 3430.0], [34.3, 3431.0], [34.4, 3431.0], [34.5, 3434.0], [34.6, 3440.0], [34.7, 3447.0], [34.8, 3450.0], [34.9, 3458.0], [35.0, 3462.0], [35.1, 3469.0], [35.2, 3469.0], [35.3, 3476.0], [35.4, 3480.0], [35.5, 3493.0], [35.6, 3497.0], [35.7, 3498.0], [35.8, 3508.0], [35.9, 3520.0], [36.0, 3531.0], [36.1, 3532.0], [36.2, 3537.0], [36.3, 3545.0], [36.4, 3554.0], [36.5, 3561.0], [36.6, 3565.0], [36.7, 3568.0], [36.8, 3572.0], [36.9, 3577.0], [37.0, 3586.0], [37.1, 3607.0], [37.2, 3612.0], [37.3, 3613.0], [37.4, 3614.0], [37.5, 3616.0], [37.6, 3627.0], [37.7, 3637.0], [37.8, 3672.0], [37.9, 3676.0], [38.0, 3676.0], [38.1, 3681.0], [38.2, 3684.0], [38.3, 3684.0], [38.4, 3688.0], [38.5, 3722.0], [38.6, 3729.0], [38.7, 3737.0], [38.8, 3750.0], [38.9, 3750.0], [39.0, 3760.0], [39.1, 3762.0], [39.2, 3764.0], [39.3, 3768.0], [39.4, 3770.0], [39.5, 3787.0], [39.6, 3791.0], [39.7, 3797.0], [39.8, 3803.0], [39.9, 3804.0], [40.0, 3809.0], [40.1, 3828.0], [40.2, 3828.0], [40.3, 3846.0], [40.4, 3865.0], [40.5, 3871.0], [40.6, 3886.0], [40.7, 3901.0], [40.8, 3904.0], [40.9, 3913.0], [41.0, 3916.0], [41.1, 3917.0], [41.2, 3947.0], [41.3, 3954.0], [41.4, 3956.0], [41.5, 3967.0], [41.6, 3988.0], [41.7, 3990.0], [41.8, 4017.0], [41.9, 4033.0], [42.0, 4047.0], [42.1, 4048.0], [42.2, 4068.0], [42.3, 4071.0], [42.4, 4092.0], [42.5, 4111.0], [42.6, 4147.0], [42.7, 4161.0], [42.8, 4175.0], [42.9, 4182.0], [43.0, 4184.0], [43.1, 4195.0], [43.2, 4202.0], [43.3, 4204.0], [43.4, 4205.0], [43.5, 4208.0], [43.6, 4215.0], [43.7, 4225.0], [43.8, 4243.0], [43.9, 4276.0], [44.0, 4290.0], [44.1, 4291.0], [44.2, 4302.0], [44.3, 4324.0], [44.4, 4333.0], [44.5, 4368.0], [44.6, 4397.0], [44.7, 4422.0], [44.8, 4428.0], [44.9, 4466.0], [45.0, 4504.0], [45.1, 4511.0], [45.2, 4513.0], [45.3, 4515.0], [45.4, 4515.0], [45.5, 4515.0], [45.6, 4519.0], [45.7, 4530.0], [45.8, 4544.0], [45.9, 4551.0], [46.0, 4565.0], [46.1, 4570.0], [46.2, 4578.0], [46.3, 4606.0], [46.4, 4636.0], [46.5, 4671.0], [46.6, 4673.0], [46.7, 4708.0], [46.8, 4713.0], [46.9, 4741.0], [47.0, 4751.0], [47.1, 4765.0], [47.2, 4774.0], [47.3, 4780.0], [47.4, 4787.0], [47.5, 4808.0], [47.6, 4823.0], [47.7, 4823.0], [47.8, 4829.0], [47.9, 4842.0], [48.0, 4846.0], [48.1, 4882.0], [48.2, 4888.0], [48.3, 4899.0], [48.4, 4903.0], [48.5, 4905.0], [48.6, 4921.0], [48.7, 4942.0], [48.8, 4952.0], [48.9, 4955.0], [49.0, 4974.0], [49.1, 4988.0], [49.2, 5028.0], [49.3, 5062.0], [49.4, 5085.0], [49.5, 5103.0], [49.6, 5107.0], [49.7, 5114.0], [49.8, 5146.0], [49.9, 5151.0], [50.0, 5154.0], [50.1, 5159.0], [50.2, 5167.0], [50.3, 5172.0], [50.4, 5209.0], [50.5, 5210.0], [50.6, 5211.0], [50.7, 5240.0], [50.8, 5288.0], [50.9, 5291.0], [51.0, 5294.0], [51.1, 5310.0], [51.2, 5342.0], [51.3, 5381.0], [51.4, 5434.0], [51.5, 5485.0], [51.6, 5492.0], [51.7, 5527.0], [51.8, 5539.0], [51.9, 5542.0], [52.0, 5547.0], [52.1, 5593.0], [52.2, 5594.0], [52.3, 5599.0], [52.4, 5617.0], [52.5, 5631.0], [52.6, 5642.0], [52.7, 5700.0], [52.8, 5704.0], [52.9, 5717.0], [53.0, 5722.0], [53.1, 5724.0], [53.2, 5747.0], [53.3, 5754.0], [53.4, 5786.0], [53.5, 5871.0], [53.6, 5885.0], [53.7, 5891.0], [53.8, 5892.0], [53.9, 5904.0], [54.0, 5904.0], [54.1, 5965.0], [54.2, 6027.0], [54.3, 6036.0], [54.4, 6093.0], [54.5, 6108.0], [54.6, 6122.0], [54.7, 6172.0], [54.8, 6187.0], [54.9, 6198.0], [55.0, 6206.0], [55.1, 6226.0], [55.2, 6241.0], [55.3, 6242.0], [55.4, 6265.0], [55.5, 6274.0], [55.6, 6336.0], [55.7, 6366.0], [55.8, 6371.0], [55.9, 6440.0], [56.0, 6445.0], [56.1, 6474.0], [56.2, 6483.0], [56.3, 6548.0], [56.4, 6670.0], [56.5, 6740.0], [56.6, 6773.0], [56.7, 6774.0], [56.8, 6814.0], [56.9, 6871.0], [57.0, 7000.0], [57.1, 7232.0], [57.2, 7245.0], [57.3, 7277.0], [57.4, 7326.0], [57.5, 7515.0], [57.6, 7671.0], [57.7, 7683.0], [57.8, 7793.0], [57.9, 8024.0], [58.0, 8121.0], [58.1, 8295.0], [58.2, 8358.0], [58.3, 8438.0], [58.4, 8547.0], [58.5, 8588.0], [58.6, 8620.0], [58.7, 8695.0], [58.8, 8772.0], [58.9, 8774.0], [59.0, 8779.0], [59.1, 8824.0], [59.2, 8890.0], [59.3, 9138.0], [59.4, 9175.0], [59.5, 9220.0], [59.6, 9315.0], [59.7, 9355.0], [59.8, 9419.0], [59.9, 9436.0], [60.0, 9436.0], [60.1, 9457.0], [60.2, 9513.0], [60.3, 9555.0], [60.4, 9589.0], [60.5, 9637.0], [60.6, 9875.0], [60.7, 9916.0], [60.8, 9950.0], [60.9, 9967.0], [61.0, 10038.0], [61.1, 10086.0], [61.2, 10158.0], [61.3, 10176.0], [61.4, 10247.0], [61.5, 10282.0], [61.6, 10404.0], [61.7, 10455.0], [61.8, 10492.0], [61.9, 10663.0], [62.0, 10687.0], [62.1, 10747.0], [62.2, 11055.0], [62.3, 11219.0], [62.4, 11285.0], [62.5, 11304.0], [62.6, 11514.0], [62.7, 14119.0], [62.8, 14365.0], [62.9, 14597.0], [63.0, 14700.0], [63.1, 15240.0], [63.2, 15847.0], [63.3, 16120.0], [63.4, 16146.0], [63.5, 16219.0], [63.6, 16605.0], [63.7, 16641.0], [63.8, 16735.0], [63.9, 16817.0], [64.0, 16901.0], [64.1, 17030.0], [64.2, 17066.0], [64.3, 17243.0], [64.4, 17417.0], [64.5, 17470.0], [64.6, 17513.0], [64.7, 17666.0], [64.8, 17678.0], [64.9, 17690.0], [65.0, 17696.0], [65.1, 17701.0], [65.2, 17836.0], [65.3, 17848.0], [65.4, 17874.0], [65.5, 17901.0], [65.6, 17993.0], [65.7, 17995.0], [65.8, 18003.0], [65.9, 18003.0], [66.0, 18035.0], [66.1, 18081.0], [66.2, 18156.0], [66.3, 18187.0], [66.4, 18251.0], [66.5, 18254.0], [66.6, 18315.0], [66.7, 18360.0], [66.8, 18423.0], [66.9, 18487.0], [67.0, 18498.0], [67.1, 18607.0], [67.2, 18673.0], [67.3, 18751.0], [67.4, 18892.0], [67.5, 18971.0], [67.6, 19051.0], [67.7, 19070.0], [67.8, 19235.0], [67.9, 19298.0], [68.0, 19453.0], [68.1, 19689.0], [68.2, 19763.0], [68.3, 20062.0], [68.4, 20236.0], [68.5, 20475.0], [68.6, 20592.0], [68.7, 20711.0], [68.8, 20781.0], [68.9, 21317.0], [69.0, 27265.0], [69.1, 27482.0], [69.2, 27714.0], [69.3, 27746.0], [69.4, 28058.0], [69.5, 28510.0], [69.6, 29037.0], [69.7, 29430.0], [69.8, 29436.0], [69.9, 29436.0], [70.0, 29438.0], [70.1, 29439.0], [70.2, 29472.0], [70.3, 29707.0], [70.4, 29809.0], [70.5, 30087.0], [70.6, 30172.0], [70.7, 30342.0], [70.8, 31185.0], [70.9, 31477.0], [71.0, 31734.0], [71.1, 32017.0], [71.2, 33073.0], [71.3, 33431.0], [71.4, 33776.0], [71.5, 33844.0], [71.6, 34909.0], [71.7, 35272.0], [71.8, 35567.0], [71.9, 35682.0], [72.0, 36032.0], [72.1, 36574.0], [72.2, 36693.0], [72.3, 37893.0], [72.4, 38520.0], [72.5, 38609.0], [72.6, 44628.0], [72.7, 44890.0], [72.8, 45846.0], [72.9, 45883.0], [73.0, 47551.0], [73.1, 48009.0], [73.2, 48254.0], [73.3, 48945.0], [73.4, 49078.0], [73.5, 49262.0], [73.6, 49457.0], [73.7, 49475.0], [73.8, 49711.0], [73.9, 51155.0], [74.0, 52639.0], [74.1, 53063.0], [74.2, 53352.0], [74.3, 54181.0], [74.4, 54184.0], [74.5, 56731.0], [74.6, 57057.0], [74.7, 57260.0], [74.8, 66436.0], [74.9, 66963.0], [75.0, 67359.0], [75.1, 67490.0], [75.2, 67837.0], [75.3, 67845.0], [75.4, 67845.0], [75.5, 68725.0], [75.6, 68725.0], [75.7, 69209.0], [75.8, 69620.0], [75.9, 70494.0], [76.0, 70971.0], [76.1, 71935.0], [76.2, 72352.0], [76.3, 72668.0], [76.4, 72886.0], [76.5, 72952.0], [76.6, 72959.0], [76.7, 72969.0], [76.8, 73152.0], [76.9, 73254.0], [77.0, 73401.0], [77.1, 76550.0], [77.2, 76771.0], [77.3, 77123.0], [77.4, 77218.0], [77.5, 79651.0], [77.6, 84140.0], [77.7, 84836.0], [77.8, 86034.0], [77.9, 86039.0], [78.0, 86750.0], [78.1, 86824.0], [78.2, 86832.0], [78.3, 87025.0], [78.4, 87027.0], [78.5, 87131.0], [78.6, 88076.0], [78.7, 88356.0], [78.8, 88733.0], [78.9, 88747.0], [79.0, 89169.0], [79.1, 90095.0], [79.2, 90239.0], [79.3, 90768.0], [79.4, 90806.0], [79.5, 90904.0], [79.6, 91251.0], [79.7, 91491.0], [79.8, 109261.0], [79.9, 109418.0], [80.0, 109652.0], [80.1, 109836.0], [80.2, 111152.0], [80.3, 131636.0], [80.4, 132460.0], [80.5, 132470.0], [80.6, 132527.0], [80.7, 132534.0], [80.8, 132537.0], [80.9, 132540.0], [81.0, 132547.0], [81.1, 132555.0], [81.2, 132559.0], [81.3, 132564.0], [81.4, 132566.0], [81.5, 132573.0], [81.6, 132582.0], [81.7, 132587.0], [81.8, 132590.0], [81.9, 132594.0], [82.0, 132597.0], [82.1, 132603.0], [82.2, 132609.0], [82.3, 132621.0], [82.4, 132623.0], [82.5, 132627.0], [82.6, 132628.0], [82.7, 132632.0], [82.8, 132640.0], [82.9, 132642.0], [83.0, 132648.0], [83.1, 132649.0], [83.2, 132659.0], [83.3, 132665.0], [83.4, 132668.0], [83.5, 132673.0], [83.6, 132676.0], [83.7, 132690.0], [83.8, 132691.0], [83.9, 132698.0], [84.0, 132698.0], [84.1, 132712.0], [84.2, 132712.0], [84.3, 132713.0], [84.4, 132722.0], [84.5, 132725.0], [84.6, 132728.0], [84.7, 132740.0], [84.8, 132741.0], [84.9, 132746.0], [85.0, 132747.0], [85.1, 132752.0], [85.2, 132757.0], [85.3, 132768.0], [85.4, 132768.0], [85.5, 132770.0], [85.6, 132777.0], [85.7, 132782.0], [85.8, 132788.0], [85.9, 132793.0], [86.0, 132797.0], [86.1, 132805.0], [86.2, 132817.0], [86.3, 132819.0], [86.4, 132828.0], [86.5, 132832.0], [86.6, 132833.0], [86.7, 132834.0], [86.8, 132837.0], [86.9, 132840.0], [87.0, 132854.0], [87.1, 132855.0], [87.2, 132859.0], [87.3, 132860.0], [87.4, 132863.0], [87.5, 132872.0], [87.6, 132887.0], [87.7, 132888.0], [87.8, 132888.0], [87.9, 132890.0], [88.0, 132892.0], [88.1, 132895.0], [88.2, 132906.0], [88.3, 132913.0], [88.4, 132919.0], [88.5, 132923.0], [88.6, 132928.0], [88.7, 132932.0], [88.8, 132936.0], [88.9, 132941.0], [89.0, 132949.0], [89.1, 132950.0], [89.2, 132959.0], [89.3, 132964.0], [89.4, 132968.0], [89.5, 132973.0], [89.6, 132977.0], [89.7, 132982.0], [89.8, 132993.0], [89.9, 132998.0], [90.0, 132999.0], [90.1, 133006.0], [90.2, 133012.0], [90.3, 133014.0], [90.4, 133024.0], [90.5, 133034.0], [90.6, 133043.0], [90.7, 133045.0], [90.8, 133054.0], [90.9, 133061.0], [91.0, 133064.0], [91.1, 133074.0], [91.2, 133077.0], [91.3, 133077.0], [91.4, 133088.0], [91.5, 133095.0], [91.6, 133119.0], [91.7, 133119.0], [91.8, 133120.0], [91.9, 133120.0], [92.0, 133120.0], [92.1, 133120.0], [92.2, 133149.0], [92.3, 133155.0], [92.4, 133183.0], [92.5, 133184.0], [92.6, 133202.0], [92.7, 133210.0], [92.8, 133230.0], [92.9, 133236.0], [93.0, 133246.0], [93.1, 133257.0], [93.2, 133266.0], [93.3, 133289.0], [93.4, 133300.0], [93.5, 133300.0], [93.6, 133300.0], [93.7, 133301.0], [93.8, 133301.0], [93.9, 133302.0], [94.0, 133308.0], [94.1, 133308.0], [94.2, 133309.0], [94.3, 133309.0], [94.4, 133310.0], [94.5, 133310.0], [94.6, 133310.0], [94.7, 133311.0], [94.8, 133313.0], [94.9, 153583.0], [95.0, 153583.0], [95.1, 153584.0], [95.2, 153585.0], [95.3, 153585.0], [95.4, 153586.0], [95.5, 153586.0], [95.6, 153587.0], [95.7, 153587.0], [95.8, 153587.0], [95.9, 153588.0], [96.0, 153588.0], [96.1, 153595.0], [96.2, 158891.0], [96.3, 158892.0], [96.4, 158894.0], [96.5, 158894.0], [96.6, 158894.0], [96.7, 158894.0], [96.8, 199667.0], [96.9, 199668.0], [97.0, 199668.0], [97.1, 199669.0], [97.2, 199669.0], [97.3, 199670.0], [97.4, 199670.0], [97.5, 199670.0], [97.6, 199670.0], [97.7, 199670.0], [97.8, 199670.0], [97.9, 199671.0], [98.0, 199671.0], [98.1, 199671.0], [98.2, 199671.0], [98.3, 199671.0], [98.4, 199672.0], [98.5, 199672.0], [98.6, 199672.0], [98.7, 199672.0], [98.8, 199672.0], [98.9, 199673.0], [99.0, 199673.0], [99.1, 199674.0], [99.2, 199674.0], [99.3, 199674.0], [99.4, 199674.0], [99.5, 199675.0], [99.6, 199675.0], [99.7, 199676.0], [99.8, 199676.0], [99.9, 199676.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 32.0, "series": [{"data": [[132900.0, 19.0], [73100.0, 1.0], [72300.0, 1.0], [77100.0, 1.0], [86700.0, 1.0], [88300.0, 1.0], [89100.0, 1.0], [90700.0, 1.0], [133100.0, 10.0], [33700.0, 1.0], [36500.0, 1.0], [34900.0, 1.0], [38500.0, 1.0], [48900.0, 1.0], [49700.0, 1.0], [53300.0, 1.0], [54100.0, 2.0], [67400.0, 1.0], [91400.0, 1.0], [109800.0, 1.0], [132400.0, 2.0], [199600.0, 32.0], [800.0, 3.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 3.0], [1200.0, 4.0], [1300.0, 3.0], [1400.0, 4.0], [1500.0, 12.0], [1600.0, 12.0], [1700.0, 17.0], [1800.0, 9.0], [1900.0, 10.0], [2000.0, 15.0], [2100.0, 16.0], [133300.0, 15.0], [2200.0, 24.0], [2300.0, 19.0], [2400.0, 18.0], [2500.0, 23.0], [2600.0, 20.0], [2800.0, 17.0], [2700.0, 18.0], [2900.0, 21.0], [3000.0, 23.0], [3100.0, 12.0], [3200.0, 13.0], [3300.0, 18.0], [3400.0, 19.0], [3500.0, 13.0], [3600.0, 14.0], [3700.0, 13.0], [3800.0, 9.0], [3900.0, 11.0], [4000.0, 7.0], [4300.0, 5.0], [4100.0, 7.0], [4200.0, 10.0], [67300.0, 1.0], [4500.0, 13.0], [4600.0, 4.0], [4400.0, 3.0], [72900.0, 3.0], [4700.0, 8.0], [4800.0, 9.0], [4900.0, 8.0], [5100.0, 9.0], [5000.0, 3.0], [5200.0, 7.0], [84100.0, 1.0], [5300.0, 3.0], [5500.0, 7.0], [5600.0, 3.0], [5400.0, 3.0], [5800.0, 4.0], [5700.0, 8.0], [6000.0, 3.0], [5900.0, 3.0], [6100.0, 5.0], [6200.0, 6.0], [6300.0, 3.0], [6400.0, 4.0], [6600.0, 1.0], [6500.0, 1.0], [6700.0, 3.0], [6800.0, 2.0], [7000.0, 1.0], [7200.0, 3.0], [7300.0, 1.0], [7500.0, 1.0], [7600.0, 2.0], [7700.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8500.0, 2.0], [132600.0, 20.0], [8600.0, 2.0], [8700.0, 3.0], [8400.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [9100.0, 2.0], [8800.0, 2.0], [9200.0, 1.0], [9400.0, 4.0], [9300.0, 2.0], [9500.0, 3.0], [9600.0, 1.0], [10100.0, 2.0], [9900.0, 3.0], [10200.0, 2.0], [10000.0, 2.0], [9800.0, 1.0], [10400.0, 3.0], [10600.0, 2.0], [10700.0, 1.0], [11200.0, 2.0], [11000.0, 1.0], [11500.0, 1.0], [11300.0, 1.0], [14100.0, 1.0], [14300.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [15200.0, 1.0], [15800.0, 1.0], [16100.0, 2.0], [16200.0, 1.0], [17400.0, 2.0], [16600.0, 2.0], [17200.0, 1.0], [17000.0, 2.0], [16800.0, 1.0], [18200.0, 2.0], [18400.0, 3.0], [18000.0, 4.0], [17800.0, 3.0], [17600.0, 4.0], [19000.0, 2.0], [18800.0, 1.0], [19400.0, 1.0], [19200.0, 2.0], [18600.0, 2.0], [20000.0, 1.0], [20200.0, 1.0], [20400.0, 1.0], [19600.0, 1.0], [27400.0, 1.0], [27200.0, 1.0], [28000.0, 1.0], [29000.0, 1.0], [29400.0, 6.0], [29800.0, 1.0], [30000.0, 1.0], [31400.0, 1.0], [32000.0, 1.0], [35600.0, 1.0], [35200.0, 1.0], [36000.0, 1.0], [44800.0, 1.0], [48000.0, 1.0], [49200.0, 1.0], [57200.0, 1.0], [69600.0, 1.0], [66400.0, 1.0], [70400.0, 1.0], [72800.0, 1.0], [84800.0, 1.0], [88000.0, 1.0], [91200.0, 1.0], [109600.0, 1.0], [132800.0, 21.0], [68700.0, 2.0], [71900.0, 1.0], [76700.0, 1.0], [87100.0, 1.0], [88700.0, 2.0], [111100.0, 1.0], [133000.0, 15.0], [35500.0, 1.0], [47500.0, 1.0], [51100.0, 1.0], [56700.0, 1.0], [67800.0, 3.0], [72600.0, 1.0], [73400.0, 1.0], [87000.0, 2.0], [90200.0, 1.0], [109400.0, 1.0], [133200.0, 8.0], [131600.0, 1.0], [158800.0, 6.0], [132500.0, 15.0], [66900.0, 2.0], [70900.0, 1.0], [76500.0, 1.0], [90900.0, 1.0], [16900.0, 1.0], [16700.0, 1.0], [18100.0, 2.0], [18300.0, 2.0], [17700.0, 1.0], [17900.0, 3.0], [17500.0, 1.0], [18900.0, 1.0], [18700.0, 1.0], [19700.0, 1.0], [20500.0, 1.0], [20700.0, 2.0], [21300.0, 1.0], [27700.0, 2.0], [28500.0, 1.0], [29700.0, 1.0], [30300.0, 1.0], [30100.0, 1.0], [31700.0, 1.0], [31100.0, 1.0], [33800.0, 1.0], [132700.0, 20.0], [33000.0, 1.0], [33400.0, 1.0], [36600.0, 1.0], [37800.0, 1.0], [38600.0, 1.0], [153500.0, 13.0], [44600.0, 1.0], [45800.0, 2.0], [48200.0, 1.0], [49000.0, 1.0], [49400.0, 2.0], [52600.0, 1.0], [53000.0, 1.0], [57000.0, 1.0], [69200.0, 1.0], [73200.0, 1.0], [77200.0, 1.0], [79600.0, 1.0], [86000.0, 2.0], [86800.0, 2.0], [90000.0, 1.0], [90800.0, 1.0], [109200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 199600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 773.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 21.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 773.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 206.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 21.08333333333333, "minX": 1.71541866E12, "maxY": 197.39090909090905, "series": [{"data": [[1.71541878E12, 140.88260869565218], [1.7154189E12, 75.39090909090913], [1.71541872E12, 169.24375000000006], [1.71541902E12, 21.08333333333333], [1.71541884E12, 111.6777777777778], [1.71541866E12, 197.39090909090905], [1.71541896E12, 44.17543859649122]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71541902E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1123.0, "minX": 1.0, "maxY": 133077.0, "series": [{"data": [[2.0, 23942.8], [3.0, 1123.0], [4.0, 2015.0], [5.0, 16916.5], [6.0, 3083.0], [7.0, 2615.0], [8.0, 1780.0], [9.0, 14275.0], [10.0, 10817.0], [11.0, 2835.0], [12.0, 1915.0], [13.0, 2004.0], [14.0, 2130.0], [15.0, 17690.0], [16.0, 1571.0], [17.0, 10329.0], [18.0, 10066.125], [19.0, 2735.0], [20.0, 13008.333333333332], [21.0, 2059.0], [22.0, 2456.0], [23.0, 9523.0], [24.0, 7850.25], [25.0, 5103.0], [26.0, 2476.0], [27.0, 2774.0], [28.0, 6913.0], [29.0, 2577.0], [30.0, 4205.0], [31.0, 2553.0], [33.0, 18423.0], [32.0, 98272.31343283577], [35.0, 2253.0], [34.0, 16605.0], [37.0, 2613.0], [36.0, 2893.0], [39.0, 2696.0], [38.0, 1645.0], [41.0, 9717.5], [40.0, 9990.5], [43.0, 9277.0], [42.0, 3201.0], [45.0, 4437.5], [44.0, 6801.6], [47.0, 8682.0], [46.0, 2954.6666666666665], [49.0, 2780.5], [48.0, 6187.0], [51.0, 7198.5], [50.0, 4917.0], [53.0, 133077.0], [52.0, 3217.461538461538], [55.0, 97869.54545454544], [54.0, 116993.25], [57.0, 2216.5], [56.0, 2638.0], [59.0, 50220.0], [58.0, 1996.0], [61.0, 48813.33333333333], [60.0, 2424.0], [63.0, 19061.0], [62.0, 1792.0], [67.0, 4780.0], [66.0, 9306.5], [65.0, 2583.833333333333], [64.0, 1434.0], [71.0, 6088.5], [70.0, 2941.0], [69.0, 49333.33333333333], [68.0, 11111.5], [75.0, 2791.0], [74.0, 2189.0], [73.0, 5329.6], [72.0, 1860.5], [79.0, 3496.6666666666665], [78.0, 5172.0], [77.0, 10404.0], [76.0, 3743.0], [83.0, 48592.47222222222], [82.0, 2137.0], [81.0, 3202.0], [80.0, 4023.2], [87.0, 2306.0], [86.0, 4513.0], [85.0, 3497.0], [84.0, 4422.0], [91.0, 2824.0], [90.0, 4111.0], [89.0, 8121.0], [88.0, 2796.0], [95.0, 3230.0], [94.0, 37673.75000000001], [93.0, 3450.5], [92.0, 3454.2], [99.0, 2763.5], [98.0, 3263.5], [97.0, 3520.0], [96.0, 2418.0], [103.0, 2316.5], [102.0, 1680.0], [101.0, 3676.0], [100.0, 20472.312500000004], [107.0, 13104.0], [106.0, 9419.0], [105.0, 10268.666666666666], [104.0, 12563.0], [111.0, 3364.0], [110.0, 5539.0], [109.0, 3092.0], [108.0, 3871.0], [115.0, 3398.0], [114.0, 3804.0], [113.0, 1622.0], [112.0, 2631.0], [119.0, 2823.0], [118.0, 10282.0], [117.0, 2604.0], [116.0, 6138.166666666667], [123.0, 2935.8], [122.0, 6692.0], [121.0, 3826.1666666666665], [120.0, 11296.5], [127.0, 21143.2380952381], [126.0, 11249.428571428572], [125.0, 22478.333333333336], [124.0, 6717.727272727273], [135.0, 3828.0], [134.0, 3508.0], [133.0, 3760.0], [132.0, 2684.0], [131.0, 5965.0], [130.0, 4544.0], [129.0, 14097.347826086954], [128.0, 65855.2], [143.0, 34792.5], [142.0, 109519.0542168675], [141.0, 4423.333333333334], [140.0, 3954.0], [139.0, 1902.0], [138.0, 2417.0], [137.0, 7034.0], [136.0, 3106.5], [151.0, 3388.0], [150.0, 2920.0], [149.0, 4189.5], [148.0, 1649.0], [147.0, 26803.69230769231], [146.0, 3138.0], [145.0, 4225.0], [144.0, 33995.0], [159.0, 2431.0], [158.0, 4446.333333333333], [157.0, 34158.375], [156.0, 3248.0], [155.0, 2756.6666666666665], [154.0, 5261.166666666667], [153.0, 2668.0], [152.0, 18360.0], [167.0, 30822.333333333336], [166.0, 26403.333333333332], [165.0, 3209.5], [164.0, 16947.699999999997], [163.0, 2385.3333333333335], [162.0, 20693.416666666668], [161.0, 4302.0], [160.0, 5846.0], [175.0, 9683.454545454546], [174.0, 4751.5], [173.0, 5655.25], [172.0, 3950.5], [171.0, 5107.0], [170.0, 4023.5], [169.0, 12377.5], [168.0, 1764.0], [183.0, 26332.0], [182.0, 17063.42857142857], [181.0, 7245.0], [180.0, 21172.894736842107], [179.0, 36549.375], [178.0, 34909.0], [177.0, 4696.333333333333], [176.0, 7501.916666666668], [191.0, 9199.5], [190.0, 3108.0], [189.0, 2369.0], [188.0, 15042.8], [187.0, 3046.0], [186.0, 4636.0], [185.0, 2986.0], [184.0, 4340.5], [199.0, 4355.0], [198.0, 3947.5], [197.0, 2176.0], [196.0, 5368.666666666667], [195.0, 2655.0], [194.0, 2384.0], [193.0, 4831.0], [192.0, 9362.0], [200.0, 5414.279411764706], [1.0, 2652.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[116.64999999999992, 39118.43899999996]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 115.05, "minX": 1.71541866E12, "maxY": 4974.433333333333, "series": [{"data": [[1.71541878E12, 4974.433333333333], [1.7154189E12, 399.23333333333335], [1.71541872E12, 392.0], [1.71541902E12, 235.2], [1.71541884E12, 797.7666666666667], [1.71541866E12, 269.5], [1.71541896E12, 2063.133333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71541878E12, 183.3], [1.7154189E12, 206.7], [1.71541872E12, 312.0], [1.71541902E12, 187.2], [1.71541884E12, 329.55], [1.71541866E12, 214.5], [1.71541896E12, 115.05]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71541902E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6095.345454545454, "minX": 1.71541866E12, "maxY": 87813.38596491228, "series": [{"data": [[1.71541878E12, 82940.88695652179], [1.7154189E12, 22707.163636363643], [1.71541872E12, 15574.987499999997], [1.71541902E12, 8088.124999999999], [1.71541884E12, 19969.861111111117], [1.71541866E12, 6095.345454545454], [1.71541896E12, 87813.38596491228]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71541902E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2591.508771929825, "minX": 1.71541866E12, "maxY": 19798.109090909085, "series": [{"data": [[1.71541878E12, 4364.008695652173], [1.7154189E12, 19798.109090909085], [1.71541872E12, 15574.737500000005], [1.71541902E12, 8087.979166666665], [1.71541884E12, 13855.60555555555], [1.71541866E12, 6095.063636363634], [1.71541896E12, 2591.508771929825]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71541902E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6250000000000001, "minX": 1.71541866E12, "maxY": 8.363636363636367, "series": [{"data": [[1.71541878E12, 4.578260869565218], [1.7154189E12, 0.6454545454545456], [1.71541872E12, 4.318749999999999], [1.71541902E12, 0.6250000000000001], [1.71541884E12, 2.388888888888891], [1.71541866E12, 8.363636363636367], [1.71541896E12, 0.7192982456140351]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71541902E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 804.0, "minX": 1.71541866E12, "maxY": 111152.0, "series": [{"data": [[1.71541878E12, 109836.0], [1.7154189E12, 111152.0], [1.71541872E12, 86039.0], [1.71541902E12, 57260.0], [1.71541884E12, 77218.0], [1.71541866E12, 29809.0], [1.71541896E12, 18423.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71541878E12, 804.0], [1.7154189E12, 873.0], [1.71541872E12, 1098.0], [1.71541902E12, 1123.0], [1.71541884E12, 881.0], [1.71541866E12, 917.0], [1.71541896E12, 1248.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71541878E12, 20533.5], [1.7154189E12, 88873.6], [1.71541872E12, 49473.2], [1.71541902E12, 18026.4], [1.71541884E12, 54184.0], [1.71541866E12, 14573.800000000001], [1.71541896E12, 15240.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71541878E12, 109836.0], [1.7154189E12, 111046.99999999999], [1.71541872E12, 85305.16999999998], [1.71541902E12, 57260.0], [1.71541884E12, 77151.5], [1.71541866E12, 28669.840000000004], [1.71541896E12, 18423.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71541878E12, 3566.5], [1.7154189E12, 3221.0], [1.71541872E12, 4189.5], [1.71541902E12, 4405.5], [1.71541884E12, 3797.0], [1.71541866E12, 4189.5], [1.71541896E12, 3531.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71541878E12, 66560.75], [1.7154189E12, 90869.7], [1.71541872E12, 69184.79999999999], [1.71541902E12, 30323.94999999999], [1.71541884E12, 72510.0], [1.71541866E12, 18669.249999999996], [1.71541896E12, 16735.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71541902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2913.0, "minX": 1.0, "maxY": 199671.5, "series": [{"data": [[1.0, 3138.0], [2.0, 3660.5], [4.0, 4402.0], [8.0, 3749.5], [9.0, 2913.0], [5.0, 3627.0], [6.0, 4419.5], [3.0, 3616.0], [12.0, 2967.0], [13.0, 8999.5], [7.0, 4515.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[135.0, 132860.0], [32.0, 199671.5], [9.0, 158894.0], [5.0, 72964.0], [12.0, 133120.0], [13.0, 29436.0], [7.0, 87026.0], [14.0, 153586.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 135.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 8999.0, "series": [{"data": [[1.0, 3138.0], [2.0, 3660.0], [4.0, 4402.0], [8.0, 3749.5], [9.0, 2913.0], [5.0, 3627.0], [6.0, 4419.5], [3.0, 3616.0], [12.0, 2967.0], [13.0, 8999.0], [7.0, 4515.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[135.0, 0.0], [32.0, 0.0], [9.0, 0.0], [5.0, 0.0], [12.0, 0.0], [13.0, 0.0], [7.0, 0.0], [14.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 135.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.0666666666666667, "minX": 1.71541866E12, "maxY": 4.9, "series": [{"data": [[1.71541878E12, 3.5], [1.7154189E12, 1.2166666666666666], [1.71541872E12, 2.0833333333333335], [1.71541902E12, 1.0666666666666667], [1.71541884E12, 2.3833333333333333], [1.71541866E12, 4.9], [1.71541896E12, 1.5166666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71541902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.71541866E12, "maxY": 2.816666666666667, "series": [{"data": [[1.71541878E12, 1.5666666666666667], [1.7154189E12, 1.7666666666666666], [1.71541872E12, 2.6666666666666665], [1.71541902E12, 1.6], [1.71541884E12, 2.816666666666667], [1.71541866E12, 1.8333333333333333], [1.71541896E12, 0.9833333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71541878E12, 2.2666666666666666], [1.7154189E12, 0.06666666666666667], [1.71541884E12, 0.18333333333333332], [1.71541896E12, 0.9166666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71541902E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.71541866E12, "maxY": 2.816666666666667, "series": [{"data": [[1.71541878E12, 1.5666666666666667], [1.7154189E12, 1.7666666666666666], [1.71541872E12, 2.6666666666666665], [1.71541902E12, 1.6], [1.71541884E12, 2.816666666666667], [1.71541866E12, 1.8333333333333333], [1.71541896E12, 0.9833333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.71541878E12, 2.2666666666666666], [1.7154189E12, 0.06666666666666667], [1.71541884E12, 0.18333333333333332], [1.71541896E12, 0.9166666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71541902E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.71541866E12, "maxY": 2.816666666666667, "series": [{"data": [[1.71541878E12, 1.5666666666666667], [1.7154189E12, 1.7666666666666666], [1.71541872E12, 2.6666666666666665], [1.71541902E12, 1.6], [1.71541884E12, 2.816666666666667], [1.71541866E12, 1.8333333333333333], [1.71541896E12, 0.9833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71541878E12, 2.2666666666666666], [1.7154189E12, 0.06666666666666667], [1.71541884E12, 0.18333333333333332], [1.71541896E12, 0.9166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71541902E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

