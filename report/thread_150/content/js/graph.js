/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 447.0, "minX": 0.0, "maxY": 228940.0, "series": [{"data": [[0.0, 447.0], [0.1, 670.0], [0.2, 728.0], [0.3, 733.0], [0.4, 744.0], [0.5, 804.0], [0.6, 832.0], [0.7, 844.0], [0.8, 849.0], [0.9, 925.0], [1.0, 955.0], [1.1, 956.0], [1.2, 991.0], [1.3, 999.0], [1.4, 1000.0], [1.5, 1004.0], [1.6, 1052.0], [1.7, 1090.0], [1.8, 1107.0], [1.9, 1119.0], [2.0, 1133.0], [2.1, 1177.0], [2.2, 1180.0], [2.3, 1193.0], [2.4, 1208.0], [2.5, 1211.0], [2.6, 1214.0], [2.7, 1217.0], [2.8, 1223.0], [2.9, 1226.0], [3.0, 1229.0], [3.1, 1231.0], [3.2, 1253.0], [3.3, 1261.0], [3.4, 1270.0], [3.5, 1270.0], [3.6, 1282.0], [3.7, 1282.0], [3.8, 1286.0], [3.9, 1291.0], [4.0, 1294.0], [4.1, 1302.0], [4.2, 1309.0], [4.3, 1330.0], [4.4, 1334.0], [4.5, 1340.0], [4.6, 1360.0], [4.7, 1363.0], [4.8, 1368.0], [4.9, 1368.0], [5.0, 1373.0], [5.1, 1376.0], [5.2, 1390.0], [5.3, 1390.0], [5.4, 1390.0], [5.5, 1401.0], [5.6, 1401.0], [5.7, 1414.0], [5.8, 1414.0], [5.9, 1415.0], [6.0, 1438.0], [6.1, 1441.0], [6.2, 1445.0], [6.3, 1447.0], [6.4, 1459.0], [6.5, 1465.0], [6.6, 1465.0], [6.7, 1482.0], [6.8, 1487.0], [6.9, 1490.0], [7.0, 1497.0], [7.1, 1512.0], [7.2, 1515.0], [7.3, 1521.0], [7.4, 1522.0], [7.5, 1529.0], [7.6, 1531.0], [7.7, 1534.0], [7.8, 1541.0], [7.9, 1544.0], [8.0, 1547.0], [8.1, 1549.0], [8.2, 1552.0], [8.3, 1560.0], [8.4, 1561.0], [8.5, 1564.0], [8.6, 1569.0], [8.7, 1570.0], [8.8, 1574.0], [8.9, 1580.0], [9.0, 1582.0], [9.1, 1582.0], [9.2, 1583.0], [9.3, 1586.0], [9.4, 1587.0], [9.5, 1588.0], [9.6, 1599.0], [9.7, 1603.0], [9.8, 1607.0], [9.9, 1607.0], [10.0, 1621.0], [10.1, 1623.0], [10.2, 1628.0], [10.3, 1632.0], [10.4, 1633.0], [10.5, 1635.0], [10.6, 1643.0], [10.7, 1645.0], [10.8, 1652.0], [10.9, 1653.0], [11.0, 1667.0], [11.1, 1670.0], [11.2, 1677.0], [11.3, 1679.0], [11.4, 1680.0], [11.5, 1683.0], [11.6, 1689.0], [11.7, 1699.0], [11.8, 1699.0], [11.9, 1701.0], [12.0, 1702.0], [12.1, 1707.0], [12.2, 1711.0], [12.3, 1713.0], [12.4, 1720.0], [12.5, 1721.0], [12.6, 1723.0], [12.7, 1723.0], [12.8, 1733.0], [12.9, 1736.0], [13.0, 1748.0], [13.1, 1764.0], [13.2, 1765.0], [13.3, 1770.0], [13.4, 1771.0], [13.5, 1774.0], [13.6, 1777.0], [13.7, 1778.0], [13.8, 1780.0], [13.9, 1783.0], [14.0, 1785.0], [14.1, 1786.0], [14.2, 1791.0], [14.3, 1797.0], [14.4, 1798.0], [14.5, 1799.0], [14.6, 1800.0], [14.7, 1808.0], [14.8, 1811.0], [14.9, 1825.0], [15.0, 1827.0], [15.1, 1831.0], [15.2, 1837.0], [15.3, 1839.0], [15.4, 1848.0], [15.5, 1855.0], [15.6, 1872.0], [15.7, 1876.0], [15.8, 1876.0], [15.9, 1878.0], [16.0, 1883.0], [16.1, 1889.0], [16.2, 1892.0], [16.3, 1899.0], [16.4, 1904.0], [16.5, 1905.0], [16.6, 1913.0], [16.7, 1916.0], [16.8, 1916.0], [16.9, 1924.0], [17.0, 1925.0], [17.1, 1927.0], [17.2, 1929.0], [17.3, 1929.0], [17.4, 1931.0], [17.5, 1936.0], [17.6, 1938.0], [17.7, 1958.0], [17.8, 1959.0], [17.9, 1961.0], [18.0, 1967.0], [18.1, 1970.0], [18.2, 1973.0], [18.3, 1976.0], [18.4, 1976.0], [18.5, 1977.0], [18.6, 1977.0], [18.7, 1980.0], [18.8, 1980.0], [18.9, 1989.0], [19.0, 1994.0], [19.1, 1994.0], [19.2, 2000.0], [19.3, 2006.0], [19.4, 2007.0], [19.5, 2010.0], [19.6, 2016.0], [19.7, 2018.0], [19.8, 2019.0], [19.9, 2026.0], [20.0, 2047.0], [20.1, 2056.0], [20.2, 2058.0], [20.3, 2058.0], [20.4, 2062.0], [20.5, 2069.0], [20.6, 2076.0], [20.7, 2076.0], [20.8, 2078.0], [20.9, 2080.0], [21.0, 2080.0], [21.1, 2081.0], [21.2, 2087.0], [21.3, 2091.0], [21.4, 2093.0], [21.5, 2095.0], [21.6, 2106.0], [21.7, 2108.0], [21.8, 2119.0], [21.9, 2120.0], [22.0, 2122.0], [22.1, 2130.0], [22.2, 2131.0], [22.3, 2133.0], [22.4, 2134.0], [22.5, 2134.0], [22.6, 2135.0], [22.7, 2146.0], [22.8, 2146.0], [22.9, 2149.0], [23.0, 2153.0], [23.1, 2164.0], [23.2, 2168.0], [23.3, 2174.0], [23.4, 2182.0], [23.5, 2183.0], [23.6, 2188.0], [23.7, 2194.0], [23.8, 2196.0], [23.9, 2201.0], [24.0, 2209.0], [24.1, 2212.0], [24.2, 2216.0], [24.3, 2218.0], [24.4, 2220.0], [24.5, 2233.0], [24.6, 2235.0], [24.7, 2238.0], [24.8, 2238.0], [24.9, 2247.0], [25.0, 2250.0], [25.1, 2252.0], [25.2, 2256.0], [25.3, 2265.0], [25.4, 2265.0], [25.5, 2271.0], [25.6, 2273.0], [25.7, 2274.0], [25.8, 2275.0], [25.9, 2283.0], [26.0, 2290.0], [26.1, 2293.0], [26.2, 2294.0], [26.3, 2296.0], [26.4, 2296.0], [26.5, 2297.0], [26.6, 2298.0], [26.7, 2308.0], [26.8, 2326.0], [26.9, 2332.0], [27.0, 2337.0], [27.1, 2340.0], [27.2, 2340.0], [27.3, 2341.0], [27.4, 2341.0], [27.5, 2341.0], [27.6, 2346.0], [27.7, 2347.0], [27.8, 2351.0], [27.9, 2352.0], [28.0, 2361.0], [28.1, 2365.0], [28.2, 2365.0], [28.3, 2366.0], [28.4, 2369.0], [28.5, 2372.0], [28.6, 2375.0], [28.7, 2378.0], [28.8, 2382.0], [28.9, 2396.0], [29.0, 2405.0], [29.1, 2406.0], [29.2, 2411.0], [29.3, 2423.0], [29.4, 2429.0], [29.5, 2435.0], [29.6, 2435.0], [29.7, 2438.0], [29.8, 2442.0], [29.9, 2444.0], [30.0, 2457.0], [30.1, 2458.0], [30.2, 2467.0], [30.3, 2467.0], [30.4, 2468.0], [30.5, 2471.0], [30.6, 2474.0], [30.7, 2474.0], [30.8, 2479.0], [30.9, 2483.0], [31.0, 2488.0], [31.1, 2488.0], [31.2, 2499.0], [31.3, 2505.0], [31.4, 2508.0], [31.5, 2512.0], [31.6, 2513.0], [31.7, 2517.0], [31.8, 2522.0], [31.9, 2525.0], [32.0, 2527.0], [32.1, 2532.0], [32.2, 2534.0], [32.3, 2557.0], [32.4, 2558.0], [32.5, 2559.0], [32.6, 2566.0], [32.7, 2571.0], [32.8, 2579.0], [32.9, 2580.0], [33.0, 2582.0], [33.1, 2586.0], [33.2, 2589.0], [33.3, 2590.0], [33.4, 2594.0], [33.5, 2596.0], [33.6, 2597.0], [33.7, 2600.0], [33.8, 2607.0], [33.9, 2612.0], [34.0, 2613.0], [34.1, 2620.0], [34.2, 2625.0], [34.3, 2637.0], [34.4, 2642.0], [34.5, 2645.0], [34.6, 2647.0], [34.7, 2647.0], [34.8, 2659.0], [34.9, 2669.0], [35.0, 2674.0], [35.1, 2676.0], [35.2, 2677.0], [35.3, 2680.0], [35.4, 2697.0], [35.5, 2700.0], [35.6, 2700.0], [35.7, 2705.0], [35.8, 2710.0], [35.9, 2713.0], [36.0, 2715.0], [36.1, 2716.0], [36.2, 2717.0], [36.3, 2717.0], [36.4, 2730.0], [36.5, 2747.0], [36.6, 2759.0], [36.7, 2763.0], [36.8, 2765.0], [36.9, 2765.0], [37.0, 2770.0], [37.1, 2771.0], [37.2, 2780.0], [37.3, 2784.0], [37.4, 2786.0], [37.5, 2786.0], [37.6, 2788.0], [37.7, 2789.0], [37.8, 2790.0], [37.9, 2793.0], [38.0, 2796.0], [38.1, 2798.0], [38.2, 2800.0], [38.3, 2802.0], [38.4, 2803.0], [38.5, 2807.0], [38.6, 2807.0], [38.7, 2815.0], [38.8, 2817.0], [38.9, 2819.0], [39.0, 2823.0], [39.1, 2828.0], [39.2, 2829.0], [39.3, 2831.0], [39.4, 2834.0], [39.5, 2836.0], [39.6, 2837.0], [39.7, 2837.0], [39.8, 2837.0], [39.9, 2840.0], [40.0, 2841.0], [40.1, 2843.0], [40.2, 2847.0], [40.3, 2850.0], [40.4, 2853.0], [40.5, 2854.0], [40.6, 2854.0], [40.7, 2858.0], [40.8, 2860.0], [40.9, 2868.0], [41.0, 2891.0], [41.1, 2898.0], [41.2, 2900.0], [41.3, 2905.0], [41.4, 2908.0], [41.5, 2922.0], [41.6, 2926.0], [41.7, 2930.0], [41.8, 2931.0], [41.9, 2933.0], [42.0, 2956.0], [42.1, 2965.0], [42.2, 2965.0], [42.3, 2966.0], [42.4, 2971.0], [42.5, 2971.0], [42.6, 2978.0], [42.7, 2980.0], [42.8, 2982.0], [42.9, 2986.0], [43.0, 2988.0], [43.1, 2988.0], [43.2, 2991.0], [43.3, 2994.0], [43.4, 2997.0], [43.5, 2999.0], [43.6, 3017.0], [43.7, 3018.0], [43.8, 3023.0], [43.9, 3034.0], [44.0, 3054.0], [44.1, 3066.0], [44.2, 3070.0], [44.3, 3078.0], [44.4, 3079.0], [44.5, 3083.0], [44.6, 3086.0], [44.7, 3087.0], [44.8, 3087.0], [44.9, 3088.0], [45.0, 3088.0], [45.1, 3093.0], [45.2, 3100.0], [45.3, 3102.0], [45.4, 3103.0], [45.5, 3113.0], [45.6, 3125.0], [45.7, 3125.0], [45.8, 3127.0], [45.9, 3131.0], [46.0, 3144.0], [46.1, 3151.0], [46.2, 3151.0], [46.3, 3163.0], [46.4, 3165.0], [46.5, 3170.0], [46.6, 3174.0], [46.7, 3176.0], [46.8, 3181.0], [46.9, 3185.0], [47.0, 3188.0], [47.1, 3189.0], [47.2, 3189.0], [47.3, 3189.0], [47.4, 3202.0], [47.5, 3216.0], [47.6, 3224.0], [47.7, 3230.0], [47.8, 3257.0], [47.9, 3260.0], [48.0, 3280.0], [48.1, 3282.0], [48.2, 3283.0], [48.3, 3285.0], [48.4, 3291.0], [48.5, 3296.0], [48.6, 3310.0], [48.7, 3310.0], [48.8, 3314.0], [48.9, 3327.0], [49.0, 3336.0], [49.1, 3339.0], [49.2, 3339.0], [49.3, 3347.0], [49.4, 3360.0], [49.5, 3363.0], [49.6, 3366.0], [49.7, 3373.0], [49.8, 3374.0], [49.9, 3377.0], [50.0, 3380.0], [50.1, 3410.0], [50.2, 3421.0], [50.3, 3422.0], [50.4, 3429.0], [50.5, 3450.0], [50.6, 3458.0], [50.7, 3458.0], [50.8, 3466.0], [50.9, 3468.0], [51.0, 3471.0], [51.1, 3476.0], [51.2, 3479.0], [51.3, 3497.0], [51.4, 3508.0], [51.5, 3535.0], [51.6, 3557.0], [51.7, 3557.0], [51.8, 3573.0], [51.9, 3589.0], [52.0, 3662.0], [52.1, 3670.0], [52.2, 3714.0], [52.3, 3729.0], [52.4, 3750.0], [52.5, 3752.0], [52.6, 3776.0], [52.7, 3785.0], [52.8, 3806.0], [52.9, 3838.0], [53.0, 3846.0], [53.1, 3854.0], [53.2, 3873.0], [53.3, 3940.0], [53.4, 3978.0], [53.5, 3984.0], [53.6, 3988.0], [53.7, 3988.0], [53.8, 4031.0], [53.9, 4061.0], [54.0, 4148.0], [54.1, 4165.0], [54.2, 4192.0], [54.3, 4238.0], [54.4, 4250.0], [54.5, 4261.0], [54.6, 4272.0], [54.7, 4289.0], [54.8, 4322.0], [54.9, 4322.0], [55.0, 4361.0], [55.1, 4364.0], [55.2, 4372.0], [55.3, 4375.0], [55.4, 4382.0], [55.5, 4383.0], [55.6, 4390.0], [55.7, 4391.0], [55.8, 4419.0], [55.9, 4428.0], [56.0, 4451.0], [56.1, 4451.0], [56.2, 4480.0], [56.3, 4498.0], [56.4, 4519.0], [56.5, 4521.0], [56.6, 4529.0], [56.7, 4549.0], [56.8, 4565.0], [56.9, 4610.0], [57.0, 4617.0], [57.1, 4626.0], [57.2, 4634.0], [57.3, 4643.0], [57.4, 4645.0], [57.5, 4652.0], [57.6, 4661.0], [57.7, 4676.0], [57.8, 4679.0], [57.9, 4683.0], [58.0, 4774.0], [58.1, 4809.0], [58.2, 4836.0], [58.3, 4857.0], [58.4, 4866.0], [58.5, 4870.0], [58.6, 4880.0], [58.7, 4883.0], [58.8, 4888.0], [58.9, 4899.0], [59.0, 4928.0], [59.1, 4940.0], [59.2, 4940.0], [59.3, 4943.0], [59.4, 4958.0], [59.5, 4965.0], [59.6, 4979.0], [59.7, 4987.0], [59.8, 5024.0], [59.9, 5027.0], [60.0, 5046.0], [60.1, 5079.0], [60.2, 5092.0], [60.3, 5103.0], [60.4, 5112.0], [60.5, 5134.0], [60.6, 5165.0], [60.7, 5181.0], [60.8, 5183.0], [60.9, 5195.0], [61.0, 5198.0], [61.1, 5202.0], [61.2, 5207.0], [61.3, 5212.0], [61.4, 5214.0], [61.5, 5216.0], [61.6, 5268.0], [61.7, 5268.0], [61.8, 5287.0], [61.9, 5296.0], [62.0, 5344.0], [62.1, 5351.0], [62.2, 5365.0], [62.3, 5389.0], [62.4, 5395.0], [62.5, 5407.0], [62.6, 5440.0], [62.7, 5513.0], [62.8, 5661.0], [62.9, 5677.0], [63.0, 5701.0], [63.1, 5730.0], [63.2, 5810.0], [63.3, 5874.0], [63.4, 5892.0], [63.5, 5908.0], [63.6, 5936.0], [63.7, 5988.0], [63.8, 5999.0], [63.9, 6029.0], [64.0, 6048.0], [64.1, 6071.0], [64.2, 6093.0], [64.3, 6256.0], [64.4, 6262.0], [64.5, 6358.0], [64.6, 6373.0], [64.7, 6397.0], [64.8, 6491.0], [64.9, 6585.0], [65.0, 6612.0], [65.1, 6854.0], [65.2, 6881.0], [65.3, 6885.0], [65.4, 7056.0], [65.5, 7065.0], [65.6, 7118.0], [65.7, 7289.0], [65.8, 7327.0], [65.9, 7416.0], [66.0, 7739.0], [66.1, 7763.0], [66.2, 7890.0], [66.3, 7970.0], [66.4, 8093.0], [66.5, 8173.0], [66.6, 8177.0], [66.7, 8229.0], [66.8, 8229.0], [66.9, 8376.0], [67.0, 8414.0], [67.1, 8426.0], [67.2, 8441.0], [67.3, 8460.0], [67.4, 8465.0], [67.5, 8630.0], [67.6, 8642.0], [67.7, 8665.0], [67.8, 8671.0], [67.9, 8676.0], [68.0, 8733.0], [68.1, 8772.0], [68.2, 8780.0], [68.3, 8788.0], [68.4, 8806.0], [68.5, 8837.0], [68.6, 8837.0], [68.7, 8883.0], [68.8, 8895.0], [68.9, 8908.0], [69.0, 8911.0], [69.1, 8913.0], [69.2, 8929.0], [69.3, 8954.0], [69.4, 8988.0], [69.5, 8990.0], [69.6, 9037.0], [69.7, 9050.0], [69.8, 9061.0], [69.9, 9095.0], [70.0, 9097.0], [70.1, 9116.0], [70.2, 9147.0], [70.3, 9196.0], [70.4, 9198.0], [70.5, 9211.0], [70.6, 9218.0], [70.7, 9230.0], [70.8, 9269.0], [70.9, 9291.0], [71.0, 9321.0], [71.1, 9329.0], [71.2, 9338.0], [71.3, 9345.0], [71.4, 9367.0], [71.5, 9470.0], [71.6, 9488.0], [71.7, 9528.0], [71.8, 9528.0], [71.9, 9538.0], [72.0, 9545.0], [72.1, 9636.0], [72.2, 9668.0], [72.3, 9711.0], [72.4, 9733.0], [72.5, 9769.0], [72.6, 9840.0], [72.7, 9871.0], [72.8, 9875.0], [72.9, 9876.0], [73.0, 9939.0], [73.1, 10002.0], [73.2, 10027.0], [73.3, 10033.0], [73.4, 10110.0], [73.5, 10119.0], [73.6, 10217.0], [73.7, 10226.0], [73.8, 10228.0], [73.9, 10300.0], [74.0, 10306.0], [74.1, 10347.0], [74.2, 10372.0], [74.3, 10392.0], [74.4, 10425.0], [74.5, 10428.0], [74.6, 10533.0], [74.7, 10818.0], [74.8, 11025.0], [74.9, 11039.0], [75.0, 11165.0], [75.1, 11172.0], [75.2, 11473.0], [75.3, 11480.0], [75.4, 11733.0], [75.5, 11795.0], [75.6, 11915.0], [75.7, 12036.0], [75.8, 12189.0], [75.9, 12208.0], [76.0, 12252.0], [76.1, 12386.0], [76.2, 12457.0], [76.3, 12548.0], [76.4, 12771.0], [76.5, 13304.0], [76.6, 13667.0], [76.7, 13722.0], [76.8, 13824.0], [76.9, 14009.0], [77.0, 14192.0], [77.1, 14715.0], [77.2, 16056.0], [77.3, 16098.0], [77.4, 16345.0], [77.5, 16440.0], [77.6, 16462.0], [77.7, 16485.0], [77.8, 16594.0], [77.9, 16622.0], [78.0, 16739.0], [78.1, 16854.0], [78.2, 17010.0], [78.3, 17062.0], [78.4, 17110.0], [78.5, 17306.0], [78.6, 17383.0], [78.7, 17387.0], [78.8, 17449.0], [78.9, 17580.0], [79.0, 17677.0], [79.1, 17700.0], [79.2, 17817.0], [79.3, 17819.0], [79.4, 17880.0], [79.5, 17889.0], [79.6, 17911.0], [79.7, 17931.0], [79.8, 17953.0], [79.9, 18107.0], [80.0, 18187.0], [80.1, 18227.0], [80.2, 18247.0], [80.3, 18416.0], [80.4, 18475.0], [80.5, 18607.0], [80.6, 18650.0], [80.7, 18742.0], [80.8, 18858.0], [80.9, 18954.0], [81.0, 19082.0], [81.1, 19293.0], [81.2, 19370.0], [81.3, 23164.0], [81.4, 23817.0], [81.5, 23982.0], [81.6, 25392.0], [81.7, 25846.0], [81.8, 26181.0], [81.9, 26212.0], [82.0, 26587.0], [82.1, 26872.0], [82.2, 27418.0], [82.3, 28866.0], [82.4, 29117.0], [82.5, 29262.0], [82.6, 29434.0], [82.7, 29505.0], [82.8, 29784.0], [82.9, 29806.0], [83.0, 29896.0], [83.1, 30369.0], [83.2, 30639.0], [83.3, 31241.0], [83.4, 32062.0], [83.5, 32859.0], [83.6, 33287.0], [83.7, 33721.0], [83.8, 33761.0], [83.9, 33767.0], [84.0, 33822.0], [84.1, 33861.0], [84.2, 33889.0], [84.3, 33994.0], [84.4, 34046.0], [84.5, 34053.0], [84.6, 34064.0], [84.7, 34082.0], [84.8, 34114.0], [84.9, 34154.0], [85.0, 34430.0], [85.1, 34572.0], [85.2, 34592.0], [85.3, 34629.0], [85.4, 34633.0], [85.5, 34692.0], [85.6, 34711.0], [85.7, 34792.0], [85.8, 34978.0], [85.9, 35067.0], [86.0, 35198.0], [86.1, 36278.0], [86.2, 36436.0], [86.3, 49996.0], [86.4, 50257.0], [86.5, 50337.0], [86.6, 52351.0], [86.7, 52753.0], [86.8, 53752.0], [86.9, 55869.0], [87.0, 56076.0], [87.1, 56319.0], [87.2, 56360.0], [87.3, 57542.0], [87.4, 58093.0], [87.5, 58149.0], [87.6, 58732.0], [87.7, 60638.0], [87.8, 61702.0], [87.9, 63041.0], [88.0, 63075.0], [88.1, 66038.0], [88.2, 66118.0], [88.3, 66183.0], [88.4, 66191.0], [88.5, 66367.0], [88.6, 66454.0], [88.7, 66502.0], [88.8, 66503.0], [88.9, 66825.0], [89.0, 66895.0], [89.1, 66948.0], [89.2, 66970.0], [89.3, 66980.0], [89.4, 67163.0], [89.5, 67169.0], [89.6, 67299.0], [89.7, 67311.0], [89.8, 67454.0], [89.9, 67476.0], [90.0, 67835.0], [90.1, 68093.0], [90.2, 68481.0], [90.3, 68746.0], [90.4, 68918.0], [90.5, 71920.0], [90.6, 77368.0], [90.7, 78475.0], [90.8, 78503.0], [90.9, 78510.0], [91.0, 79845.0], [91.1, 84854.0], [91.2, 85503.0], [91.3, 85585.0], [91.4, 85638.0], [91.5, 85758.0], [91.6, 85939.0], [91.7, 85988.0], [91.8, 86104.0], [91.9, 86136.0], [92.0, 86170.0], [92.1, 86287.0], [92.2, 106832.0], [92.3, 106875.0], [92.4, 106884.0], [92.5, 106885.0], [92.6, 106885.0], [92.7, 106885.0], [92.8, 106885.0], [92.9, 106885.0], [93.0, 106887.0], [93.1, 106887.0], [93.2, 106887.0], [93.3, 106887.0], [93.4, 107288.0], [93.5, 107426.0], [93.6, 107461.0], [93.7, 107501.0], [93.8, 107749.0], [93.9, 107818.0], [94.0, 107974.0], [94.1, 108520.0], [94.2, 109214.0], [94.3, 126657.0], [94.4, 130208.0], [94.5, 130230.0], [94.6, 130716.0], [94.7, 130911.0], [94.8, 130992.0], [94.9, 131062.0], [95.0, 131158.0], [95.1, 131248.0], [95.2, 131310.0], [95.3, 131409.0], [95.4, 131573.0], [95.5, 131645.0], [95.6, 131666.0], [95.7, 131685.0], [95.8, 131692.0], [95.9, 131699.0], [96.0, 131714.0], [96.1, 132096.0], [96.2, 132733.0], [96.3, 133566.0], [96.4, 135912.0], [96.5, 139323.0], [96.6, 139363.0], [96.7, 147183.0], [96.8, 147203.0], [96.9, 147213.0], [97.0, 147269.0], [97.1, 147285.0], [97.2, 147300.0], [97.3, 147305.0], [97.4, 147306.0], [97.5, 147320.0], [97.6, 147346.0], [97.7, 147384.0], [97.8, 147397.0], [97.9, 147502.0], [98.0, 147529.0], [98.1, 147571.0], [98.2, 147594.0], [98.3, 147613.0], [98.4, 147678.0], [98.5, 147690.0], [98.6, 147699.0], [98.7, 147701.0], [98.8, 147713.0], [98.9, 155573.0], [99.0, 155866.0], [99.1, 163827.0], [99.2, 163829.0], [99.3, 180580.0], [99.4, 199109.0], [99.5, 201002.0], [99.6, 202432.0], [99.7, 202561.0], [99.8, 204787.0], [99.9, 204789.0], [100.0, 228940.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 400.0, "maxY": 31.0, "series": [{"data": [[132000.0, 2.0], [202400.0, 1.0], [131300.0, 1.0], [139300.0, 2.0], [147300.0, 7.0], [228900.0, 1.0], [85900.0, 2.0], [107500.0, 1.0], [130700.0, 1.0], [201000.0, 1.0], [34500.0, 2.0], [33700.0, 3.0], [34100.0, 2.0], [131500.0, 1.0], [34900.0, 1.0], [147500.0, 5.0], [155500.0, 1.0], [53700.0, 1.0], [58100.0, 1.0], [61700.0, 1.0], [67400.0, 2.0], [400.0, 1.0], [107400.0, 2.0], [126600.0, 1.0], [600.0, 1.0], [700.0, 3.0], [800.0, 4.0], [900.0, 5.0], [1000.0, 4.0], [1100.0, 7.0], [1200.0, 18.0], [1300.0, 14.0], [1400.0, 17.0], [1500.0, 27.0], [1600.0, 23.0], [1700.0, 29.0], [1800.0, 19.0], [1900.0, 29.0], [2000.0, 25.0], [2100.0, 24.0], [131700.0, 1.0], [2200.0, 30.0], [2300.0, 24.0], [2400.0, 24.0], [147700.0, 2.0], [2500.0, 25.0], [2600.0, 19.0], [2700.0, 29.0], [2800.0, 31.0], [2900.0, 25.0], [3000.0, 17.0], [3100.0, 23.0], [3200.0, 13.0], [3300.0, 16.0], [3400.0, 13.0], [3500.0, 7.0], [3700.0, 6.0], [3600.0, 2.0], [3800.0, 5.0], [3900.0, 5.0], [4000.0, 2.0], [4100.0, 4.0], [4300.0, 10.0], [4200.0, 5.0], [66500.0, 2.0], [68900.0, 1.0], [67300.0, 1.0], [4400.0, 7.0], [4600.0, 11.0], [4500.0, 5.0], [4800.0, 9.0], [4700.0, 2.0], [5000.0, 6.0], [5100.0, 8.0], [4900.0, 8.0], [78500.0, 2.0], [5200.0, 9.0], [5300.0, 6.0], [85700.0, 1.0], [5600.0, 2.0], [5400.0, 2.0], [5500.0, 1.0], [5700.0, 2.0], [5800.0, 3.0], [6000.0, 5.0], [5900.0, 4.0], [6200.0, 2.0], [6300.0, 3.0], [6600.0, 1.0], [6500.0, 1.0], [6400.0, 1.0], [6800.0, 3.0], [108100.0, 1.0], [7000.0, 2.0], [7100.0, 1.0], [7400.0, 1.0], [7300.0, 1.0], [7200.0, 1.0], [7500.0, 1.0], [7900.0, 1.0], [7700.0, 2.0], [7800.0, 1.0], [8100.0, 2.0], [8000.0, 1.0], [8600.0, 5.0], [8700.0, 5.0], [8400.0, 5.0], [8300.0, 1.0], [8200.0, 2.0], [9200.0, 5.0], [8800.0, 5.0], [9000.0, 5.0], [9100.0, 5.0], [8900.0, 7.0], [9700.0, 3.0], [9600.0, 2.0], [9400.0, 2.0], [9300.0, 5.0], [9500.0, 5.0], [10000.0, 3.0], [10200.0, 3.0], [10100.0, 2.0], [9800.0, 4.0], [9900.0, 1.0], [10500.0, 1.0], [10300.0, 6.0], [10400.0, 2.0], [11000.0, 2.0], [10800.0, 1.0], [11100.0, 2.0], [11400.0, 2.0], [11700.0, 2.0], [11900.0, 1.0], [12200.0, 3.0], [12000.0, 1.0], [12100.0, 1.0], [12300.0, 1.0], [12700.0, 1.0], [12400.0, 1.0], [12500.0, 1.0], [13300.0, 1.0], [13800.0, 1.0], [13600.0, 1.0], [13700.0, 1.0], [14100.0, 1.0], [14000.0, 1.0], [14700.0, 1.0], [16000.0, 2.0], [16300.0, 1.0], [16400.0, 3.0], [16800.0, 2.0], [17400.0, 1.0], [17000.0, 2.0], [16600.0, 1.0], [17800.0, 4.0], [18200.0, 2.0], [17600.0, 1.0], [18400.0, 2.0], [18600.0, 2.0], [19200.0, 1.0], [19000.0, 1.0], [18800.0, 1.0], [23800.0, 1.0], [25800.0, 1.0], [26200.0, 1.0], [26600.0, 1.0], [26800.0, 1.0], [27400.0, 1.0], [28800.0, 1.0], [29200.0, 1.0], [29400.0, 1.0], [29800.0, 2.0], [30600.0, 1.0], [31200.0, 1.0], [32000.0, 1.0], [34400.0, 1.0], [34000.0, 4.0], [33200.0, 1.0], [32800.0, 1.0], [133500.0, 1.0], [36400.0, 1.0], [199100.0, 1.0], [56000.0, 1.0], [58000.0, 1.0], [66400.0, 1.0], [67200.0, 1.0], [68000.0, 2.0], [78400.0, 1.0], [85600.0, 1.0], [84800.0, 1.0], [107200.0, 1.0], [131200.0, 1.0], [147200.0, 4.0], [202500.0, 1.0], [67100.0, 2.0], [68700.0, 1.0], [66300.0, 1.0], [71900.0, 1.0], [85500.0, 2.0], [107900.0, 1.0], [131400.0, 1.0], [33900.0, 1.0], [34700.0, 2.0], [35100.0, 1.0], [49900.0, 1.0], [50300.0, 1.0], [52300.0, 1.0], [52700.0, 1.0], [56300.0, 2.0], [57500.0, 1.0], [58700.0, 1.0], [65100.0, 1.0], [67800.0, 1.0], [79800.0, 1.0], [86200.0, 1.0], [107800.0, 1.0], [130200.0, 2.0], [131000.0, 1.0], [131600.0, 5.0], [147600.0, 4.0], [180500.0, 1.0], [66900.0, 3.0], [66100.0, 3.0], [77300.0, 1.0], [86100.0, 4.0], [107700.0, 1.0], [108500.0, 1.0], [130900.0, 2.0], [155800.0, 1.0], [163800.0, 2.0], [16500.0, 1.0], [16700.0, 1.0], [17100.0, 1.0], [17300.0, 3.0], [18100.0, 3.0], [17500.0, 1.0], [17700.0, 1.0], [17900.0, 3.0], [18900.0, 1.0], [18700.0, 1.0], [19300.0, 1.0], [23100.0, 1.0], [23900.0, 1.0], [25300.0, 1.0], [26100.0, 1.0], [26500.0, 1.0], [29100.0, 1.0], [29500.0, 1.0], [29700.0, 1.0], [30300.0, 1.0], [34600.0, 3.0], [33800.0, 4.0], [132700.0, 1.0], [135900.0, 1.0], [131100.0, 1.0], [36200.0, 2.0], [35000.0, 1.0], [147100.0, 1.0], [50200.0, 1.0], [204700.0, 2.0], [55800.0, 1.0], [60600.0, 1.0], [63000.0, 2.0], [66800.0, 2.0], [66000.0, 1.0], [68400.0, 1.0], [106800.0, 12.0], [109200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 228900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 893.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 73.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 893.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 83.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.9166666666666667, "minX": 1.71541824E12, "maxY": 150.0, "series": [{"data": [[1.7154183E12, 145.2196721311475], [1.7154186E12, 1.9166666666666667], [1.71541842E12, 67.04395604395599], [1.71541824E12, 150.0], [1.71541854E12, 4.80952380952381], [1.71541836E12, 104.74637681159417], [1.71541848E12, 26.598639455782333]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7154186E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1135.0, "minX": 1.0, "maxY": 143682.0, "series": [{"data": [[2.0, 39098.00000000001], [3.0, 3260.0], [4.0, 31466.09090909091], [5.0, 41784.6], [6.0, 1574.0], [7.0, 1223.0], [8.0, 2271.6], [9.0, 82241.0], [10.0, 4679.0], [11.0, 2517.0], [12.0, 24395.333333333332], [13.0, 50361.875], [14.0, 1838.0], [15.0, 143682.0], [16.0, 2353.5], [17.0, 2405.0], [18.0, 1373.0], [19.0, 17809.153846153848], [20.0, 35215.0], [21.0, 2602.0], [22.0, 3241.5], [23.0, 13965.8], [24.0, 1648.0], [25.0, 3189.0], [26.0, 20292.785714285717], [27.0, 33813.0], [28.0, 2595.25], [29.0, 12658.2], [30.0, 18650.0], [31.0, 1774.0], [33.0, 1309.0], [32.0, 2803.0], [35.0, 10099.0], [34.0, 42688.375], [37.0, 12838.166666666666], [36.0, 1145.0], [39.0, 2357.5], [38.0, 2978.0], [41.0, 4031.0], [40.0, 7634.666666666667], [43.0, 3712.3750000000005], [42.0, 2720.5], [45.0, 3873.0], [44.0, 1588.0], [47.0, 10295.0], [46.0, 30163.5], [49.0, 2120.0], [48.0, 3113.0], [51.0, 4691.571428571428], [50.0, 14641.5], [53.0, 2794.0], [52.0, 4129.666666666667], [55.0, 10991.0], [54.0, 6512.5], [57.0, 2828.0], [56.0, 68315.0], [59.0, 16670.0], [58.0, 5312.9473684210525], [61.0, 4937.4], [60.0, 32905.0], [63.0, 26213.0], [62.0, 7422.583333333333], [67.0, 24150.333333333336], [66.0, 8316.42857142857], [65.0, 7566.0], [64.0, 13214.428571428572], [71.0, 24032.081081081084], [70.0, 2843.0], [69.0, 111716.87499999999], [68.0, 28569.666666666664], [75.0, 10579.166666666666], [74.0, 23493.44444444444], [73.0, 3860.666666666667], [72.0, 1270.0], [79.0, 3090.5], [78.0, 2146.0], [77.0, 2341.0], [76.0, 2294.0], [83.0, 6493.0], [82.0, 3349.6666666666665], [81.0, 5016.0], [80.0, 61846.722222222226], [87.0, 5707.5], [86.0, 4192.0], [85.0, 2695.0], [84.0, 2946.0], [91.0, 64518.91666666667], [90.0, 3213.0], [89.0, 6535.5], [88.0, 14605.5], [95.0, 34259.333333333336], [94.0, 9367.0], [93.0, 4289.0], [92.0, 4560.0], [99.0, 6165.0], [98.0, 2002.0], [97.0, 11236.0], [96.0, 6419.5], [103.0, 3641.5], [102.0, 2675.3333333333335], [101.0, 21620.818181818184], [100.0, 5132.666666666667], [107.0, 3600.1111111111113], [106.0, 5966.0], [105.0, 13484.368421052632], [104.0, 16935.8], [111.0, 3933.5], [110.0, 2879.5], [109.0, 53532.600000000006], [108.0, 11513.076923076918], [115.0, 15271.090909090908], [114.0, 22849.333333333332], [113.0, 18821.81818181818], [112.0, 2617.3333333333335], [119.0, 23975.428571428572], [118.0, 14230.000000000002], [117.0, 10747.444444444445], [116.0, 12997.5], [123.0, 6789.777777777777], [122.0, 19771.25], [121.0, 35907.5], [120.0, 23792.166666666668], [127.0, 3340.0], [126.0, 6373.0], [125.0, 3168.5], [124.0, 5511.0], [135.0, 17419.57142857143], [134.0, 3826.3333333333335], [133.0, 4322.0], [132.0, 14955.944444444445], [131.0, 35067.0], [130.0, 8908.0], [129.0, 3655.0], [128.0, 21710.8], [143.0, 3425.333333333333], [142.0, 5310.1], [141.0, 10560.0], [140.0, 17143.0], [139.0, 10774.714285714284], [138.0, 20199.8], [137.0, 1135.0], [136.0, 13914.0], [150.0, 6998.774436090229], [149.0, 13430.38888888889], [148.0, 3651.8333333333335], [147.0, 10808.486486486489], [146.0, 9405.461538461537], [145.0, 3849.8888888888887], [144.0, 12539.0], [1.0, 3497.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[93.2752380952378, 20147.591428571417]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19.5, "minX": 1.71541824E12, "maxY": 2063.483333333333, "series": [{"data": [[1.7154183E12, 779.6833333333333], [1.7154186E12, 94.26666666666667], [1.71541842E12, 2063.483333333333], [1.71541824E12, 39.2], [1.71541854E12, 148.75], [1.71541836E12, 1389.7333333333333], [1.71541848E12, 749.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7154183E12, 592.8], [1.7154186E12, 19.5], [1.71541842E12, 448.5], [1.71541824E12, 31.2], [1.71541854E12, 35.1], [1.71541836E12, 495.3], [1.71541848E12, 263.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7154186E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2203.6875, "minX": 1.71541824E12, "maxY": 36131.25000000001, "series": [{"data": [[1.7154183E12, 9874.96065573771], [1.7154186E12, 36131.25000000001], [1.71541842E12, 29146.402930402943], [1.71541824E12, 2203.6875], [1.71541854E12, 26903.71428571429], [1.71541836E12, 21476.355072463775], [1.71541848E12, 21937.782312925166]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7154186E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1729.3809523809525, "minX": 1.71541824E12, "maxY": 13874.315217391304, "series": [{"data": [[1.7154183E12, 9826.521311475415], [1.7154186E12, 1999.75], [1.71541842E12, 6874.263736263738], [1.71541824E12, 2202.9375], [1.71541854E12, 1729.3809523809525], [1.71541836E12, 13874.315217391304], [1.71541848E12, 8748.571428571428]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7154186E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6190476190476193, "minX": 1.71541824E12, "maxY": 11.687499999999996, "series": [{"data": [[1.7154183E12, 1.9967213114754112], [1.7154186E12, 0.7499999999999999], [1.71541842E12, 0.6996336996336998], [1.71541824E12, 11.687499999999996], [1.71541854E12, 0.6190476190476193], [1.71541836E12, 2.2210144927536226], [1.71541848E12, 0.7142857142857142]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7154186E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 447.0, "minX": 1.71541824E12, "maxY": 109214.0, "series": [{"data": [[1.7154183E12, 57542.0], [1.7154186E12, 3497.0], [1.71541842E12, 108186.0], [1.71541824E12, 3257.0], [1.71541854E12, 3589.0], [1.71541836E12, 109214.0], [1.71541848E12, 68481.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7154183E12, 447.0], [1.7154186E12, 1217.0], [1.71541842E12, 670.0], [1.71541824E12, 1340.0], [1.71541854E12, 1223.0], [1.71541836E12, 804.0], [1.71541848E12, 956.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7154183E12, 29795.0], [1.7154186E12, 3456.6000000000004], [1.71541842E12, 13813.800000000001], [1.71541824E12, 3030.2000000000003], [1.71541854E12, 3309.1000000000004], [1.71541836E12, 66921.5], [1.71541848E12, 35401.00000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7154183E12, 56190.64999999997], [1.7154186E12, 3497.0], [1.71541842E12, 76188.54999999997], [1.71541824E12, 3257.0], [1.71541854E12, 3589.0], [1.71541836E12, 108219.7], [1.71541848E12, 68341.31999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7154183E12, 4635.5], [1.7154186E12, 2451.0], [1.71541842E12, 3282.5], [1.71541824E12, 2344.5], [1.71541854E12, 1818.0], [1.71541836E12, 3401.0], [1.71541848E12, 2332.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7154183E12, 34136.0], [1.7154186E12, 3497.0], [1.71541842E12, 34853.69999999999], [1.71541824E12, 3257.0], [1.71541854E12, 3589.0], [1.71541836E12, 85668.0], [1.71541848E12, 66226.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7154186E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2078.0, "minX": 1.0, "maxY": 184308.0, "series": [{"data": [[8.0, 8229.0], [2.0, 2735.0], [9.0, 5181.0], [10.0, 2994.0], [3.0, 3165.0], [12.0, 85585.0], [14.0, 107374.5], [1.0, 2078.0], [4.0, 3079.0], [5.0, 4361.0], [6.0, 3027.0], [27.0, 3083.0], [7.0, 2999.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 144569.5], [8.0, 130716.0], [1.0, 166032.0], [2.0, 184308.0], [9.0, 71920.0], [10.0, 131685.0], [5.0, 132071.0], [12.0, 86170.0], [3.0, 130230.0], [27.0, 147390.5], [14.0, 106885.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 107374.5, "series": [{"data": [[8.0, 8229.0], [2.0, 2735.0], [9.0, 5180.0], [10.0, 2993.0], [3.0, 3165.0], [12.0, 85585.0], [14.0, 107374.5], [1.0, 2077.0], [4.0, 3078.5], [5.0, 4361.0], [6.0, 3027.0], [27.0, 3083.0], [7.0, 2999.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 0.0], [8.0, 0.0], [1.0, 0.0], [2.0, 0.0], [9.0, 0.0], [10.0, 0.0], [5.0, 0.0], [12.0, 0.0], [3.0, 0.0], [27.0, 0.0], [14.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 27.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.71541824E12, "maxY": 4.683333333333334, "series": [{"data": [[1.7154183E12, 4.683333333333334], [1.7154186E12, 0.16666666666666666], [1.71541842E12, 3.85], [1.71541824E12, 2.7666666666666666], [1.71541854E12, 0.25], [1.71541836E12, 3.966666666666667], [1.71541848E12, 1.8166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7154186E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71541824E12, "maxY": 5.066666666666666, "series": [{"data": [[1.7154183E12, 5.066666666666666], [1.7154186E12, 0.16666666666666666], [1.71541842E12, 3.8333333333333335], [1.71541824E12, 0.26666666666666666], [1.71541854E12, 0.3], [1.71541836E12, 4.233333333333333], [1.71541848E12, 2.25]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7154183E12, 0.016666666666666666], [1.7154186E12, 0.03333333333333333], [1.71541842E12, 0.7166666666666667], [1.71541854E12, 0.05], [1.71541836E12, 0.36666666666666664], [1.71541848E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7154186E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71541824E12, "maxY": 5.066666666666666, "series": [{"data": [[1.7154183E12, 5.066666666666666], [1.7154186E12, 0.16666666666666666], [1.71541842E12, 3.8333333333333335], [1.71541824E12, 0.26666666666666666], [1.71541854E12, 0.3], [1.71541836E12, 4.233333333333333], [1.71541848E12, 2.25]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7154183E12, 0.016666666666666666], [1.7154186E12, 0.03333333333333333], [1.71541842E12, 0.7166666666666667], [1.71541854E12, 0.05], [1.71541836E12, 0.36666666666666664], [1.71541848E12, 0.2]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7154186E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.71541824E12, "maxY": 5.066666666666666, "series": [{"data": [[1.7154183E12, 5.066666666666666], [1.7154186E12, 0.16666666666666666], [1.71541842E12, 3.8333333333333335], [1.71541824E12, 0.26666666666666666], [1.71541854E12, 0.3], [1.71541836E12, 4.233333333333333], [1.71541848E12, 2.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7154183E12, 0.016666666666666666], [1.7154186E12, 0.03333333333333333], [1.71541842E12, 0.7166666666666667], [1.71541854E12, 0.05], [1.71541836E12, 0.36666666666666664], [1.71541848E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7154186E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

